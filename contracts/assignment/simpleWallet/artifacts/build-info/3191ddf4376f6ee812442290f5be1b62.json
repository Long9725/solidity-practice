{
	"id": "3191ddf4376f6ee812442290f5be1b62",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.0",
	"solcLongVersion": "0.8.0+commit.c7dfd78e",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/assignment/simpleWallet/SimpleWallet.sol": {
				"content": "pragma solidity 0.8.0;\n\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\";\n\nimport \"./Owned.sol\";\n\ncontract SimpleWallet is Owned{\n\n    function withdrawMoney(address payable _to, uint _amount) public onlyOwner {\n        _to.transfer(_amount);\n    }\n\n    receive() external payable {\n        \n    }\n\n    fallback () external {\n        \n    }\n}"
			},
			"contracts/assignment/simpleWallet/Owned.sol": {
				"content": "pragma solidity ^0.8.0;\n\ncontract Owned {\n    address owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    /*\n        제어자.\n        밑줄 부분에 해당 제어자를 사용하는 함수 본문을 복사해온다.\n        그리고 제어자의 내용을 포함하여 다시 해당 함수로 복사한다.\n        너무 남용하면 코드가 복잡해지므로 주의한다.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"You are not allowed\");\n        _;\n    }\n\n}"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/assignment/simpleWallet/Owned.sol": {
				"Owned": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/assignment/simpleWallet/Owned.sol\":25:523  contract Owned {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/assignment/simpleWallet/Owned.sol\":66:122  constructor() public {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"contracts/assignment/simpleWallet/Owned.sol\":105:115  msg.sender */\n  caller\n    /* \"contracts/assignment/simpleWallet/Owned.sol\":97:102  owner */\n  0x00\n  dup1\n    /* \"contracts/assignment/simpleWallet/Owned.sol\":97:115  owner = msg.sender */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/assignment/simpleWallet/Owned.sol\":25:523  contract Owned {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/assignment/simpleWallet/Owned.sol\":25:523  contract Owned {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122055aa25495bb5eee753726c4664c08a6e29032155531e0b80a013862b39e2179e64736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550603f80605d6000396000f3fe6080604052600080fdfea264697066735822122055aa25495bb5eee753726c4664c08a6e29032155531e0b80a013862b39e2179e64736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x3F DUP1 PUSH1 0x5D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SSTORE 0xAA 0x25 0x49 JUMPDEST 0xB5 0xEE 0xE7 MSTORE8 PUSH19 0x6C4664C08A6E29032155531E0B80A013862B39 0xE2 OR SWAP15 PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "25:498:0:-:0;;;66:56;;;;;;;;;;105:10;97:5;;:18;;;;;;;;;;;;;;;;;;25:498;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600080fdfea264697066735822122055aa25495bb5eee753726c4664c08a6e29032155531e0b80a013862b39e2179e64736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SSTORE 0xAA 0x25 0x49 JUMPDEST 0xB5 0xEE 0xE7 MSTORE8 PUSH19 0x6C4664C08A6E29032155531E0B80A013862B39 0xE2 OR SWAP15 PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "25:498:0:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12600",
								"executionCost": "20932",
								"totalCost": "33532"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 25,
									"end": 523,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 25,
									"end": 523,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 25,
									"end": 523,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 66,
									"end": 122,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 66,
									"end": 122,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 66,
									"end": 122,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 66,
									"end": 122,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 66,
									"end": 122,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 66,
									"end": 122,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 66,
									"end": 122,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 66,
									"end": 122,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 66,
									"end": 122,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 66,
									"end": 122,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 66,
									"end": 122,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 105,
									"end": 115,
									"name": "CALLER",
									"source": 0
								},
								{
									"begin": 97,
									"end": 102,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 97,
									"end": 102,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 97,
									"end": 115,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 97,
									"end": 115,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 97,
									"end": 115,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 25,
									"end": 523,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 25,
									"end": 523,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 25,
									"end": 523,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 25,
									"end": 523,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 25,
									"end": 523,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 25,
									"end": 523,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 25,
									"end": 523,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122055aa25495bb5eee753726c4664c08a6e29032155531e0b80a013862b39e2179e64736f6c63430008000033",
									".code": [
										{
											"begin": 25,
											"end": 523,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 25,
											"end": 523,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 25,
											"end": 523,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 25,
											"end": 523,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 25,
											"end": 523,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 25,
											"end": 523,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/assignment/simpleWallet/Owned.sol\":\"Owned\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/assignment/simpleWallet/Owned.sol\":{\"keccak256\":\"0x9a3437fc5a9acb41c6b6d2e0a30db927c510b3c0159ebc52ac5716c4f4045986\",\"urls\":[\"bzz-raw://f5a6ae9bb0e16297bec0cc2290f09a62531a5e8769e977e74b2d713db85cbfed\",\"dweb:/ipfs/QmX6hcuk8t77TJcqvB8vBV8wh7YwX1v8vdG1H4J9c1zMxC\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 3,
								"contract": "contracts/assignment/simpleWallet/Owned.sol:Owned",
								"label": "owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/assignment/simpleWallet/SimpleWallet.sol": {
				"SimpleWallet": {
					"abi": [
						{
							"stateMutability": "nonpayable",
							"type": "fallback"
						},
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "withdrawMoney",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/assignment/simpleWallet/SimpleWallet.sol\":154:398  contract SimpleWallet is Owned{... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"contracts/assignment/simpleWallet/Owned.sol\":105:115  msg.sender */\n  caller\n    /* \"contracts/assignment/simpleWallet/Owned.sol\":97:102  owner */\n  0x00\n  dup1\n    /* \"contracts/assignment/simpleWallet/Owned.sol\":97:115  owner = msg.sender */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/assignment/simpleWallet/SimpleWallet.sol\":154:398  contract SimpleWallet is Owned{... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/assignment/simpleWallet/SimpleWallet.sol\":154:398  contract SimpleWallet is Owned{... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xf274c897\n      eq\n      tag_3\n      jumpi\n      jump(tag_2)\n    tag_1:\n      jumpi(tag_2, calldatasize)\n      stop\n    tag_2:\n      callvalue\n      dup1\n      iszero\n      tag_6\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_6:\n      pop\n      stop\n        /* \"contracts/assignment/simpleWallet/SimpleWallet.sol\":191:304  function withdrawMoney(address payable _to, uint _amount) public onlyOwner {... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_9\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_9:\n      pop\n      tag_10\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_11\n      swap2\n      swap1\n      tag_12\n      jump\t// in\n    tag_11:\n      tag_13\n      jump\t// in\n    tag_10:\n      stop\n    tag_13:\n        /* \"contracts/assignment/simpleWallet/Owned.sol\":473:478  owner */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/assignment/simpleWallet/Owned.sol\":459:478  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/assignment/simpleWallet/Owned.sol\":459:469  msg.sender */\n      caller\n        /* \"contracts/assignment/simpleWallet/Owned.sol\":459:478  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/assignment/simpleWallet/Owned.sol\":451:502  require(msg.sender == owner, \"You are not allowed\") */\n      tag_15\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_16\n      swap1\n      tag_17\n      jump\t// in\n    tag_16:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_15:\n        /* \"contracts/assignment/simpleWallet/SimpleWallet.sol\":276:279  _to */\n      dup2\n        /* \"contracts/assignment/simpleWallet/SimpleWallet.sol\":276:288  _to.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/assignment/simpleWallet/SimpleWallet.sol\":276:297  _to.transfer(_amount) */\n      0x08fc\n        /* \"contracts/assignment/simpleWallet/SimpleWallet.sol\":289:296  _amount */\n      dup3\n        /* \"contracts/assignment/simpleWallet/SimpleWallet.sol\":276:297  _to.transfer(_amount) */\n      swap1\n      dup2\n      iszero\n      mul\n      swap1\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_20\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_20:\n      pop\n        /* \"contracts/assignment/simpleWallet/SimpleWallet.sol\":191:304  function withdrawMoney(address payable _to, uint _amount) public onlyOwner {... */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:162   */\n    tag_22:\n      0x00\n        /* \"#utility.yul\":99:105   */\n      dup2\n        /* \"#utility.yul\":86:106   */\n      calldataload\n        /* \"#utility.yul\":77:106   */\n      swap1\n      pop\n        /* \"#utility.yul\":115:156   */\n      tag_24\n        /* \"#utility.yul\":150:155   */\n      dup2\n        /* \"#utility.yul\":115:156   */\n      tag_25\n      jump\t// in\n    tag_24:\n        /* \"#utility.yul\":67:162   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":168:307   */\n    tag_26:\n      0x00\n        /* \"#utility.yul\":252:258   */\n      dup2\n        /* \"#utility.yul\":239:259   */\n      calldataload\n        /* \"#utility.yul\":230:259   */\n      swap1\n      pop\n        /* \"#utility.yul\":268:301   */\n      tag_28\n        /* \"#utility.yul\":295:300   */\n      dup2\n        /* \"#utility.yul\":268:301   */\n      tag_29\n      jump\t// in\n    tag_28:\n        /* \"#utility.yul\":220:307   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":313:736   */\n    tag_12:\n      0x00\n      dup1\n        /* \"#utility.yul\":446:448   */\n      0x40\n        /* \"#utility.yul\":434:443   */\n      dup4\n        /* \"#utility.yul\":425:432   */\n      dup6\n        /* \"#utility.yul\":421:444   */\n      sub\n        /* \"#utility.yul\":417:449   */\n      slt\n        /* \"#utility.yul\":414:416   */\n      iszero\n      tag_31\n      jumpi\n        /* \"#utility.yul\":462:463   */\n      0x00\n        /* \"#utility.yul\":459:460   */\n      dup1\n        /* \"#utility.yul\":452:464   */\n      revert\n        /* \"#utility.yul\":414:416   */\n    tag_31:\n        /* \"#utility.yul\":505:506   */\n      0x00\n        /* \"#utility.yul\":530:591   */\n      tag_32\n        /* \"#utility.yul\":583:590   */\n      dup6\n        /* \"#utility.yul\":574:580   */\n      dup3\n        /* \"#utility.yul\":563:572   */\n      dup7\n        /* \"#utility.yul\":559:581   */\n      add\n        /* \"#utility.yul\":530:591   */\n      tag_22\n      jump\t// in\n    tag_32:\n        /* \"#utility.yul\":520:591   */\n      swap3\n      pop\n        /* \"#utility.yul\":476:601   */\n      pop\n        /* \"#utility.yul\":640:642   */\n      0x20\n        /* \"#utility.yul\":666:719   */\n      tag_33\n        /* \"#utility.yul\":711:718   */\n      dup6\n        /* \"#utility.yul\":702:708   */\n      dup3\n        /* \"#utility.yul\":691:700   */\n      dup7\n        /* \"#utility.yul\":687:709   */\n      add\n        /* \"#utility.yul\":666:719   */\n      tag_26\n      jump\t// in\n    tag_33:\n        /* \"#utility.yul\":656:719   */\n      swap2\n      pop\n        /* \"#utility.yul\":611:729   */\n      pop\n        /* \"#utility.yul\":404:736   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":742:1059   */\n    tag_34:\n      0x00\n        /* \"#utility.yul\":905:972   */\n      tag_36\n        /* \"#utility.yul\":969:971   */\n      0x13\n        /* \"#utility.yul\":964:967   */\n      dup4\n        /* \"#utility.yul\":905:972   */\n      tag_37\n      jump\t// in\n    tag_36:\n        /* \"#utility.yul\":898:972   */\n      swap2\n      pop\n        /* \"#utility.yul\":1002:1023   */\n      0x596f7520617265206e6f7420616c6c6f77656400000000000000000000000000\n        /* \"#utility.yul\":998:999   */\n      0x00\n        /* \"#utility.yul\":993:996   */\n      dup4\n        /* \"#utility.yul\":989:1000   */\n      add\n        /* \"#utility.yul\":982:1024   */\n      mstore\n        /* \"#utility.yul\":1050:1052   */\n      0x20\n        /* \"#utility.yul\":1045:1048   */\n      dup3\n        /* \"#utility.yul\":1041:1053   */\n      add\n        /* \"#utility.yul\":1034:1053   */\n      swap1\n      pop\n        /* \"#utility.yul\":888:1059   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1065:1484   */\n    tag_17:\n      0x00\n        /* \"#utility.yul\":1269:1271   */\n      0x20\n        /* \"#utility.yul\":1258:1267   */\n      dup3\n        /* \"#utility.yul\":1254:1272   */\n      add\n        /* \"#utility.yul\":1246:1272   */\n      swap1\n      pop\n        /* \"#utility.yul\":1318:1327   */\n      dup2\n        /* \"#utility.yul\":1312:1316   */\n      dup2\n        /* \"#utility.yul\":1308:1328   */\n      sub\n        /* \"#utility.yul\":1304:1305   */\n      0x00\n        /* \"#utility.yul\":1293:1302   */\n      dup4\n        /* \"#utility.yul\":1289:1306   */\n      add\n        /* \"#utility.yul\":1282:1329   */\n      mstore\n        /* \"#utility.yul\":1346:1477   */\n      tag_39\n        /* \"#utility.yul\":1472:1476   */\n      dup2\n        /* \"#utility.yul\":1346:1477   */\n      tag_34\n      jump\t// in\n    tag_39:\n        /* \"#utility.yul\":1338:1477   */\n      swap1\n      pop\n        /* \"#utility.yul\":1236:1484   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1490:1659   */\n    tag_37:\n      0x00\n        /* \"#utility.yul\":1608:1614   */\n      dup3\n        /* \"#utility.yul\":1603:1606   */\n      dup3\n        /* \"#utility.yul\":1596:1615   */\n      mstore\n        /* \"#utility.yul\":1648:1652   */\n      0x20\n        /* \"#utility.yul\":1643:1646   */\n      dup3\n        /* \"#utility.yul\":1639:1653   */\n      add\n        /* \"#utility.yul\":1624:1653   */\n      swap1\n      pop\n        /* \"#utility.yul\":1586:1659   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1665:1769   */\n    tag_41:\n      0x00\n        /* \"#utility.yul\":1739:1763   */\n      tag_43\n        /* \"#utility.yul\":1757:1762   */\n      dup3\n        /* \"#utility.yul\":1739:1763   */\n      tag_44\n      jump\t// in\n    tag_43:\n        /* \"#utility.yul\":1728:1763   */\n      swap1\n      pop\n        /* \"#utility.yul\":1718:1769   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1775:1901   */\n    tag_44:\n      0x00\n        /* \"#utility.yul\":1852:1894   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":1845:1850   */\n      dup3\n        /* \"#utility.yul\":1841:1895   */\n      and\n        /* \"#utility.yul\":1830:1895   */\n      swap1\n      pop\n        /* \"#utility.yul\":1820:1901   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1907:1984   */\n    tag_46:\n      0x00\n        /* \"#utility.yul\":1973:1978   */\n      dup2\n        /* \"#utility.yul\":1962:1978   */\n      swap1\n      pop\n        /* \"#utility.yul\":1952:1984   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1990:2128   */\n    tag_25:\n        /* \"#utility.yul\":2071:2103   */\n      tag_49\n        /* \"#utility.yul\":2097:2102   */\n      dup2\n        /* \"#utility.yul\":2071:2103   */\n      tag_41\n      jump\t// in\n    tag_49:\n        /* \"#utility.yul\":2064:2069   */\n      dup2\n        /* \"#utility.yul\":2061:2104   */\n      eq\n        /* \"#utility.yul\":2051:2053   */\n      tag_50\n      jumpi\n        /* \"#utility.yul\":2118:2119   */\n      0x00\n        /* \"#utility.yul\":2115:2116   */\n      dup1\n        /* \"#utility.yul\":2108:2120   */\n      revert\n        /* \"#utility.yul\":2051:2053   */\n    tag_50:\n        /* \"#utility.yul\":2041:2128   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2134:2256   */\n    tag_29:\n        /* \"#utility.yul\":2207:2231   */\n      tag_52\n        /* \"#utility.yul\":2225:2230   */\n      dup2\n        /* \"#utility.yul\":2207:2231   */\n      tag_46\n      jump\t// in\n    tag_52:\n        /* \"#utility.yul\":2200:2205   */\n      dup2\n        /* \"#utility.yul\":2197:2232   */\n      eq\n        /* \"#utility.yul\":2187:2189   */\n      tag_53\n      jumpi\n        /* \"#utility.yul\":2246:2247   */\n      0x00\n        /* \"#utility.yul\":2243:2244   */\n      dup1\n        /* \"#utility.yul\":2236:2248   */\n      revert\n        /* \"#utility.yul\":2187:2189   */\n    tag_53:\n        /* \"#utility.yul\":2177:2256   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220ea71a0f490e3a3fc9c013f545995824aa8e28d4b32d76920b8c46d21b1b18faa64736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506102b1806100606000396000f3fe6080604052600436106100225760003560e01c8063f274c8971461003857610029565b3661002957005b34801561003557600080fd5b50005b34801561004457600080fd5b5061005f600480360381019061005a9190610164565b610061565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146100ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e6906101e0565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610135573d6000803e3d6000fd5b505050565b6000813590506101498161024d565b92915050565b60008135905061015e81610264565b92915050565b6000806040838503121561017757600080fd5b60006101858582860161013a565b92505060206101968582860161014f565b9150509250929050565b60006101ad601383610200565b91507f596f7520617265206e6f7420616c6c6f776564000000000000000000000000006000830152602082019050919050565b600060208201905081810360008301526101f9816101a0565b9050919050565b600082825260208201905092915050565b600061021c82610223565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61025681610211565b811461026157600080fd5b50565b61026d81610243565b811461027857600080fd5b5056fea2646970667358221220ea71a0f490e3a3fc9c013f545995824aa8e28d4b32d76920b8c46d21b1b18faa64736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x2B1 DUP1 PUSH2 0x60 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x22 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xF274C897 EQ PUSH2 0x38 JUMPI PUSH2 0x29 JUMP JUMPDEST CALLDATASIZE PUSH2 0x29 JUMPI STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5A SWAP2 SWAP1 PUSH2 0x164 JUMP JUMPDEST PUSH2 0x61 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xEF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE6 SWAP1 PUSH2 0x1E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x135 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x149 DUP2 PUSH2 0x24D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x15E DUP2 PUSH2 0x264 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x185 DUP6 DUP3 DUP7 ADD PUSH2 0x13A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x196 DUP6 DUP3 DUP7 ADD PUSH2 0x14F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AD PUSH1 0x13 DUP4 PUSH2 0x200 JUMP JUMPDEST SWAP2 POP PUSH32 0x596F7520617265206E6F7420616C6C6F77656400000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F9 DUP2 PUSH2 0x1A0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21C DUP3 PUSH2 0x223 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x256 DUP2 PUSH2 0x211 JUMP JUMPDEST DUP2 EQ PUSH2 0x261 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x26D DUP2 PUSH2 0x243 JUMP JUMPDEST DUP2 EQ PUSH2 0x278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEA PUSH18 0xA0F490E3A3FC9C013F545995824AA8E28D4B ORIGIN 0xD7 PUSH10 0x20B8C46D21B1B18FAA64 PUSH20 0x6F6C634300080000330000000000000000000000 ",
							"sourceMap": "154:244:1:-:0;;;;;;;;;;;;;105:10:0;97:5;;:18;;;;;;;;;;;;;;;;;;154:244:1;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:2259:4",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "67:95:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "77:29:4",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "99:6:4"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "86:12:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "86:20:4"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "77:5:4"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "150:5:4"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address_payable",
																	"nodeType": "YulIdentifier",
																	"src": "115:34:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "115:41:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "115:41:4"
														}
													]
												},
												"name": "abi_decode_t_address_payable",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "45:6:4",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "53:3:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "61:5:4",
														"type": ""
													}
												],
												"src": "7:155:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "220:87:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "230:29:4",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "252:6:4"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "239:12:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "239:20:4"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "230:5:4"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "295:5:4"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "268:26:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "268:33:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "268:33:4"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "198:6:4",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "206:3:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "214:5:4",
														"type": ""
													}
												],
												"src": "168:139:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "404:332:4",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "450:16:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "459:1:4",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "462:1:4",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "452:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "452:12:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "452:12:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "425:7:4"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "434:9:4"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "421:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "421:23:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "446:2:4",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "417:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "417:32:4"
															},
															"nodeType": "YulIf",
															"src": "414:2:4"
														},
														{
															"nodeType": "YulBlock",
															"src": "476:125:4",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "491:15:4",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "505:1:4",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "495:6:4",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "520:71:4",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "563:9:4"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "574:6:4"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "559:3:4"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "559:22:4"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "583:7:4"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_payable",
																			"nodeType": "YulIdentifier",
																			"src": "530:28:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "530:61:4"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "520:6:4"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "611:118:4",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "626:16:4",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "640:2:4",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "630:6:4",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "656:63:4",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "691:9:4"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "702:6:4"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "687:3:4"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "687:22:4"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "711:7:4"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "666:20:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "666:53:4"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "656:6:4"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_payablet_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "366:9:4",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "377:7:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "389:6:4",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "397:6:4",
														"type": ""
													}
												],
												"src": "313:423:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "888:171:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "898:74:4",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "964:3:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "969:2:4",
																		"type": "",
																		"value": "19"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "905:58:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "905:67:4"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "898:3:4"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "993:3:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "998:1:4",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "989:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "989:11:4"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "1002:21:4",
																		"type": "",
																		"value": "You are not allowed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "982:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "982:42:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "982:42:4"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1034:19:4",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1045:3:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1050:2:4",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1041:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1041:12:4"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "1034:3:4"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_407a93cd9588e1f87530ae7a55d9dae87b125ed01cf287ec5fa47d65e38e4c3c_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "876:3:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "884:3:4",
														"type": ""
													}
												],
												"src": "742:317:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1236:248:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1246:26:4",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1258:9:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1269:2:4",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1254:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1254:18:4"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1246:4:4"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1293:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1304:1:4",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1289:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1289:17:4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "1312:4:4"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1318:9:4"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1308:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1308:20:4"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1282:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1282:47:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1282:47:4"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1338:139:4",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "1472:4:4"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_407a93cd9588e1f87530ae7a55d9dae87b125ed01cf287ec5fa47d65e38e4c3c_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1346:124:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1346:131:4"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1338:4:4"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_407a93cd9588e1f87530ae7a55d9dae87b125ed01cf287ec5fa47d65e38e4c3c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1216:9:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1231:4:4",
														"type": ""
													}
												],
												"src": "1065:419:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1586:73:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1603:3:4"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1608:6:4"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1596:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1596:19:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1596:19:4"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1624:29:4",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1643:3:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1648:4:4",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1639:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1639:14:4"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "1624:11:4"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1558:3:4",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1563:6:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "1574:11:4",
														"type": ""
													}
												],
												"src": "1490:169:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1718:51:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1728:35:4",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1757:5:4"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "1739:17:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1739:24:4"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1728:7:4"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address_payable",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1700:5:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1710:7:4",
														"type": ""
													}
												],
												"src": "1665:104:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1820:81:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1830:65:4",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1845:5:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1852:42:4",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1841:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1841:54:4"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1830:7:4"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1802:5:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1812:7:4",
														"type": ""
													}
												],
												"src": "1775:126:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1952:32:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1962:16:4",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1973:5:4"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1962:7:4"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1934:5:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1944:7:4",
														"type": ""
													}
												],
												"src": "1907:77:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2041:87:4",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2106:16:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2115:1:4",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2118:1:4",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2108:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2108:12:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2108:12:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2064:5:4"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "2097:5:4"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address_payable",
																					"nodeType": "YulIdentifier",
																					"src": "2071:25:4"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2071:32:4"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2061:2:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2061:43:4"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2054:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2054:51:4"
															},
															"nodeType": "YulIf",
															"src": "2051:2:4"
														}
													]
												},
												"name": "validator_revert_t_address_payable",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2034:5:4",
														"type": ""
													}
												],
												"src": "1990:138:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2177:79:4",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2234:16:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2243:1:4",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2246:1:4",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2236:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2236:12:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2236:12:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2200:5:4"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "2225:5:4"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "2207:17:4"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2207:24:4"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2197:2:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2197:35:4"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2190:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2190:43:4"
															},
															"nodeType": "YulIf",
															"src": "2187:2:4"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2170:5:4",
														"type": ""
													}
												],
												"src": "2134:122:4"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_t_address_payable(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address_payable(value)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address_payablet_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_payable(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_stringliteral_407a93cd9588e1f87530ae7a55d9dae87b125ed01cf287ec5fa47d65e38e4c3c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 19)\n\n        mstore(add(pos, 0), \"You are not allowed\")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_407a93cd9588e1f87530ae7a55d9dae87b125ed01cf287ec5fa47d65e38e4c3c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_407a93cd9588e1f87530ae7a55d9dae87b125ed01cf287ec5fa47d65e38e4c3c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function cleanup_t_address_payable(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_address_payable(value) {\n        if iszero(eq(value, cleanup_t_address_payable(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 4,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600436106100225760003560e01c8063f274c8971461003857610029565b3661002957005b34801561003557600080fd5b50005b34801561004457600080fd5b5061005f600480360381019061005a9190610164565b610061565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146100ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e6906101e0565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610135573d6000803e3d6000fd5b505050565b6000813590506101498161024d565b92915050565b60008135905061015e81610264565b92915050565b6000806040838503121561017757600080fd5b60006101858582860161013a565b92505060206101968582860161014f565b9150509250929050565b60006101ad601383610200565b91507f596f7520617265206e6f7420616c6c6f776564000000000000000000000000006000830152602082019050919050565b600060208201905081810360008301526101f9816101a0565b9050919050565b600082825260208201905092915050565b600061021c82610223565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61025681610211565b811461026157600080fd5b50565b61026d81610243565b811461027857600080fd5b5056fea2646970667358221220ea71a0f490e3a3fc9c013f545995824aa8e28d4b32d76920b8c46d21b1b18faa64736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x22 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xF274C897 EQ PUSH2 0x38 JUMPI PUSH2 0x29 JUMP JUMPDEST CALLDATASIZE PUSH2 0x29 JUMPI STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5A SWAP2 SWAP1 PUSH2 0x164 JUMP JUMPDEST PUSH2 0x61 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xEF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE6 SWAP1 PUSH2 0x1E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x135 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x149 DUP2 PUSH2 0x24D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x15E DUP2 PUSH2 0x264 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x185 DUP6 DUP3 DUP7 ADD PUSH2 0x13A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x196 DUP6 DUP3 DUP7 ADD PUSH2 0x14F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AD PUSH1 0x13 DUP4 PUSH2 0x200 JUMP JUMPDEST SWAP2 POP PUSH32 0x596F7520617265206E6F7420616C6C6F77656400000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F9 DUP2 PUSH2 0x1A0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21C DUP3 PUSH2 0x223 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x256 DUP2 PUSH2 0x211 JUMP JUMPDEST DUP2 EQ PUSH2 0x261 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x26D DUP2 PUSH2 0x243 JUMP JUMPDEST DUP2 EQ PUSH2 0x278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEA PUSH18 0xA0F490E3A3FC9C013F545995824AA8E28D4B ORIGIN 0xD7 PUSH10 0x20B8C46D21B1B18FAA64 PUSH20 0x6F6C634300080000330000000000000000000000 ",
							"sourceMap": "154:244:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;191:113;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;473:5:0;;;;;;;;;;459:19;;:10;:19;;;451:51;;;;;;;;;;;;:::i;:::-;;;;;;;;;276:3:1::1;:12;;:21;289:7;276:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;191:113:::0;;:::o;7:155:4:-;;99:6;86:20;77:29;;115:41;150:5;115:41;:::i;:::-;67:95;;;;:::o;168:139::-;;252:6;239:20;230:29;;268:33;295:5;268:33;:::i;:::-;220:87;;;;:::o;313:423::-;;;446:2;434:9;425:7;421:23;417:32;414:2;;;462:1;459;452:12;414:2;505:1;530:61;583:7;574:6;563:9;559:22;530:61;:::i;:::-;520:71;;476:125;640:2;666:53;711:7;702:6;691:9;687:22;666:53;:::i;:::-;656:63;;611:118;404:332;;;;;:::o;742:317::-;;905:67;969:2;964:3;905:67;:::i;:::-;898:74;;1002:21;998:1;993:3;989:11;982:42;1050:2;1045:3;1041:12;1034:19;;888:171;;;:::o;1065:419::-;;1269:2;1258:9;1254:18;1246:26;;1318:9;1312:4;1308:20;1304:1;1293:9;1289:17;1282:47;1346:131;1472:4;1346:131;:::i;:::-;1338:139;;1236:248;;;:::o;1490:169::-;;1608:6;1603:3;1596:19;1648:4;1643:3;1639:14;1624:29;;1586:73;;;;:::o;1665:104::-;;1739:24;1757:5;1739:24;:::i;:::-;1728:35;;1718:51;;;:::o;1775:126::-;;1852:42;1845:5;1841:54;1830:65;;1820:81;;;:::o;1907:77::-;;1973:5;1962:16;;1952:32;;;:::o;1990:138::-;2071:32;2097:5;2071:32;:::i;:::-;2064:5;2061:43;2051:2;;2118:1;2115;2108:12;2051:2;2041:87;:::o;2134:122::-;2207:24;2225:5;2207:24;:::i;:::-;2200:5;2197:35;2187:2;;2246:1;2243;2236:12;2187:2;2177:79;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "137800",
								"executionCost": "21049",
								"totalCost": "158849"
							},
							"external": {
								"": "112",
								"withdrawMoney(address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 154,
									"end": 398,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 154,
									"end": 398,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 154,
									"end": 398,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 154,
									"end": 398,
									"name": "CALLVALUE",
									"source": 1
								},
								{
									"begin": 154,
									"end": 398,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 154,
									"end": 398,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 154,
									"end": 398,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 154,
									"end": 398,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 154,
									"end": 398,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 154,
									"end": 398,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 154,
									"end": 398,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 154,
									"end": 398,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 154,
									"end": 398,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 154,
									"end": 398,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 105,
									"end": 115,
									"name": "CALLER",
									"source": 0
								},
								{
									"begin": 97,
									"end": 102,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 97,
									"end": 102,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 97,
									"end": 115,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 97,
									"end": 115,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 97,
									"end": 115,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 97,
									"end": 115,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 154,
									"end": 398,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 154,
									"end": 398,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 154,
									"end": 398,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 154,
									"end": 398,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 154,
									"end": 398,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 154,
									"end": 398,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 154,
									"end": 398,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ea71a0f490e3a3fc9c013f545995824aa8e28d4b32d76920b8c46d21b1b18faa64736f6c63430008000033",
									".code": [
										{
											"begin": 154,
											"end": 398,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 154,
											"end": 398,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 154,
											"end": 398,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 154,
											"end": 398,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 154,
											"end": 398,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 154,
											"end": 398,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 154,
											"end": 398,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 154,
											"end": 398,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 154,
											"end": 398,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 154,
											"end": 398,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 154,
											"end": 398,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 154,
											"end": 398,
											"name": "SHR",
											"source": 1
										},
										{
											"begin": 154,
											"end": 398,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 154,
											"end": 398,
											"name": "PUSH",
											"source": 1,
											"value": "F274C897"
										},
										{
											"begin": 154,
											"end": 398,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 154,
											"end": 398,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 154,
											"end": 398,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 154,
											"end": 398,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 154,
											"end": 398,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 154,
											"end": 398,
											"name": "tag",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 154,
											"end": 398,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 154,
											"end": 398,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 154,
											"end": 398,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 154,
											"end": 398,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 154,
											"end": 398,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 154,
											"end": 398,
											"name": "tag",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 154,
											"end": 398,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 154,
											"end": 398,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 154,
											"end": 398,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 154,
											"end": 398,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 154,
											"end": 398,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 154,
											"end": 398,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 154,
											"end": 398,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 154,
											"end": 398,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 154,
											"end": 398,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 154,
											"end": 398,
											"name": "tag",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 154,
											"end": 398,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 154,
											"end": 398,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 154,
											"end": 398,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 191,
											"end": 304,
											"name": "tag",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 191,
											"end": 304,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 191,
											"end": 304,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 191,
											"end": 304,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 191,
											"end": 304,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 191,
											"end": 304,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 191,
											"end": 304,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 191,
											"end": 304,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 191,
											"end": 304,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 191,
											"end": 304,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 191,
											"end": 304,
											"name": "tag",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 191,
											"end": 304,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 191,
											"end": 304,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 191,
											"end": 304,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 191,
											"end": 304,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 191,
											"end": 304,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 191,
											"end": 304,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 191,
											"end": 304,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 191,
											"end": 304,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 191,
											"end": 304,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 191,
											"end": 304,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 191,
											"end": 304,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 191,
											"end": 304,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 191,
											"end": 304,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 191,
											"end": 304,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 191,
											"end": 304,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 191,
											"end": 304,
											"name": "tag",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 191,
											"end": 304,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 191,
											"end": 304,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 191,
											"end": 304,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 191,
											"end": 304,
											"name": "tag",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 191,
											"end": 304,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 191,
											"end": 304,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 191,
											"end": 304,
											"name": "tag",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 191,
											"end": 304,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 473,
											"end": 478,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 473,
											"end": 478,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 473,
											"end": 478,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 473,
											"end": 478,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 473,
											"end": 478,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 473,
											"end": 478,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 473,
											"end": 478,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 473,
											"end": 478,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 473,
											"end": 478,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 473,
											"end": 478,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 459,
											"end": 478,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 459,
											"end": 478,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 459,
											"end": 469,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 459,
											"end": 478,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 459,
											"end": 478,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 459,
											"end": 478,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 451,
											"end": 502,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 451,
											"end": 502,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 451,
											"end": 502,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 451,
											"end": 502,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 451,
											"end": 502,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 451,
											"end": 502,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 451,
											"end": 502,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 451,
											"end": 502,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 451,
											"end": 502,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 451,
											"end": 502,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 451,
											"end": 502,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 451,
											"end": 502,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 451,
											"end": 502,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 451,
											"end": 502,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 451,
											"end": 502,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 451,
											"end": 502,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 451,
											"end": 502,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 451,
											"end": 502,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 451,
											"end": 502,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 451,
											"end": 502,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 451,
											"end": 502,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 451,
											"end": 502,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 451,
											"end": 502,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 451,
											"end": 502,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 276,
											"end": 279,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 276,
											"end": 288,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 276,
											"end": 288,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "PUSH",
											"source": 1,
											"value": "8FC"
										},
										{
											"begin": 289,
											"end": 296,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 276,
											"end": 297,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 276,
											"end": 297,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 276,
											"end": 297,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "CALL",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 276,
											"end": 297,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 276,
											"end": 297,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "RETURNDATACOPY",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "RETURNDATASIZE",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 276,
											"end": 297,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "tag",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 276,
											"end": 297,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 276,
											"end": 297,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 191,
											"end": 304,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 191,
											"end": 304,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 191,
											"end": 304,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 162,
											"name": "tag",
											"source": 4,
											"value": "22"
										},
										{
											"begin": 7,
											"end": 162,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7,
											"end": 162,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 99,
											"end": 105,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 86,
											"end": 106,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 77,
											"end": 106,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 77,
											"end": 106,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 115,
											"end": 156,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 150,
											"end": 155,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 115,
											"end": 156,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "25"
										},
										{
											"begin": 115,
											"end": 156,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 115,
											"end": 156,
											"name": "tag",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 115,
											"end": 156,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 67,
											"end": 162,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 67,
											"end": 162,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 67,
											"end": 162,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 67,
											"end": 162,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 67,
											"end": 162,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 168,
											"end": 307,
											"name": "tag",
											"source": 4,
											"value": "26"
										},
										{
											"begin": 168,
											"end": 307,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 168,
											"end": 307,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 252,
											"end": 258,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 239,
											"end": 259,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 230,
											"end": 259,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 230,
											"end": 259,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 268,
											"end": 301,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "28"
										},
										{
											"begin": 295,
											"end": 300,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 268,
											"end": 301,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 268,
											"end": 301,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 268,
											"end": 301,
											"name": "tag",
											"source": 4,
											"value": "28"
										},
										{
											"begin": 268,
											"end": 301,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 220,
											"end": 307,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 220,
											"end": 307,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 220,
											"end": 307,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 220,
											"end": 307,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 220,
											"end": 307,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 313,
											"end": 736,
											"name": "tag",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 313,
											"end": 736,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 313,
											"end": 736,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 313,
											"end": 736,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 446,
											"end": 448,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 434,
											"end": 443,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 425,
											"end": 432,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 421,
											"end": 444,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 417,
											"end": 449,
											"name": "SLT",
											"source": 4
										},
										{
											"begin": 414,
											"end": 416,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 414,
											"end": 416,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 414,
											"end": 416,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 462,
											"end": 463,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 460,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 452,
											"end": 464,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 414,
											"end": 416,
											"name": "tag",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 414,
											"end": 416,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 505,
											"end": 506,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 591,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 583,
											"end": 590,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 574,
											"end": 580,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 563,
											"end": 572,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 559,
											"end": 581,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 530,
											"end": 591,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "22"
										},
										{
											"begin": 530,
											"end": 591,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 530,
											"end": 591,
											"name": "tag",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 530,
											"end": 591,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 520,
											"end": 591,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 520,
											"end": 591,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 476,
											"end": 601,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 640,
											"end": 642,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 666,
											"end": 719,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "33"
										},
										{
											"begin": 711,
											"end": 718,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 702,
											"end": 708,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 691,
											"end": 700,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 687,
											"end": 709,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 666,
											"end": 719,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "26"
										},
										{
											"begin": 666,
											"end": 719,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 666,
											"end": 719,
											"name": "tag",
											"source": 4,
											"value": "33"
										},
										{
											"begin": 666,
											"end": 719,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 656,
											"end": 719,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 656,
											"end": 719,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 611,
											"end": 729,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 404,
											"end": 736,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 404,
											"end": 736,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 404,
											"end": 736,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 404,
											"end": 736,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 404,
											"end": 736,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 404,
											"end": 736,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 742,
											"end": 1059,
											"name": "tag",
											"source": 4,
											"value": "34"
										},
										{
											"begin": 742,
											"end": 1059,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 742,
											"end": 1059,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 905,
											"end": 972,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "36"
										},
										{
											"begin": 969,
											"end": 971,
											"name": "PUSH",
											"source": 4,
											"value": "13"
										},
										{
											"begin": 964,
											"end": 967,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 905,
											"end": 972,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "37"
										},
										{
											"begin": 905,
											"end": 972,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 905,
											"end": 972,
											"name": "tag",
											"source": 4,
											"value": "36"
										},
										{
											"begin": 905,
											"end": 972,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 898,
											"end": 972,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 898,
											"end": 972,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1002,
											"end": 1023,
											"name": "PUSH",
											"source": 4,
											"value": "596F7520617265206E6F7420616C6C6F77656400000000000000000000000000"
										},
										{
											"begin": 998,
											"end": 999,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 993,
											"end": 996,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 989,
											"end": 1000,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 982,
											"end": 1024,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1050,
											"end": 1052,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1045,
											"end": 1048,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1041,
											"end": 1053,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1034,
											"end": 1053,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1034,
											"end": 1053,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 888,
											"end": 1059,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 888,
											"end": 1059,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 888,
											"end": 1059,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 888,
											"end": 1059,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1065,
											"end": 1484,
											"name": "tag",
											"source": 4,
											"value": "17"
										},
										{
											"begin": 1065,
											"end": 1484,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1065,
											"end": 1484,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1269,
											"end": 1271,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1258,
											"end": 1267,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1254,
											"end": 1272,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1246,
											"end": 1272,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1246,
											"end": 1272,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1318,
											"end": 1327,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1312,
											"end": 1316,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1308,
											"end": 1328,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1304,
											"end": 1305,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1293,
											"end": 1302,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1289,
											"end": 1306,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1282,
											"end": 1329,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1346,
											"end": 1477,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 1472,
											"end": 1476,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1346,
											"end": 1477,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "34"
										},
										{
											"begin": 1346,
											"end": 1477,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1346,
											"end": 1477,
											"name": "tag",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 1346,
											"end": 1477,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1338,
											"end": 1477,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1338,
											"end": 1477,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1236,
											"end": 1484,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1236,
											"end": 1484,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1236,
											"end": 1484,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1236,
											"end": 1484,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1490,
											"end": 1659,
											"name": "tag",
											"source": 4,
											"value": "37"
										},
										{
											"begin": 1490,
											"end": 1659,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1490,
											"end": 1659,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1608,
											"end": 1614,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1603,
											"end": 1606,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1596,
											"end": 1615,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1648,
											"end": 1652,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1643,
											"end": 1646,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1639,
											"end": 1653,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1624,
											"end": 1653,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1624,
											"end": 1653,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1586,
											"end": 1659,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 1586,
											"end": 1659,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1586,
											"end": 1659,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1586,
											"end": 1659,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1586,
											"end": 1659,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1665,
											"end": 1769,
											"name": "tag",
											"source": 4,
											"value": "41"
										},
										{
											"begin": 1665,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1665,
											"end": 1769,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1739,
											"end": 1763,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "43"
										},
										{
											"begin": 1757,
											"end": 1762,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1739,
											"end": 1763,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 1739,
											"end": 1763,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1739,
											"end": 1763,
											"name": "tag",
											"source": 4,
											"value": "43"
										},
										{
											"begin": 1739,
											"end": 1763,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1728,
											"end": 1763,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1728,
											"end": 1763,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1718,
											"end": 1769,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1718,
											"end": 1769,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1718,
											"end": 1769,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1718,
											"end": 1769,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1775,
											"end": 1901,
											"name": "tag",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 1775,
											"end": 1901,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1775,
											"end": 1901,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1852,
											"end": 1894,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1845,
											"end": 1850,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1841,
											"end": 1895,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1830,
											"end": 1895,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1830,
											"end": 1895,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1820,
											"end": 1901,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1820,
											"end": 1901,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1820,
											"end": 1901,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1820,
											"end": 1901,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1907,
											"end": 1984,
											"name": "tag",
											"source": 4,
											"value": "46"
										},
										{
											"begin": 1907,
											"end": 1984,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1907,
											"end": 1984,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1973,
											"end": 1978,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1962,
											"end": 1978,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1962,
											"end": 1978,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1952,
											"end": 1984,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1952,
											"end": 1984,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1952,
											"end": 1984,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1952,
											"end": 1984,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1990,
											"end": 2128,
											"name": "tag",
											"source": 4,
											"value": "25"
										},
										{
											"begin": 1990,
											"end": 2128,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2071,
											"end": 2103,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "49"
										},
										{
											"begin": 2097,
											"end": 2102,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2071,
											"end": 2103,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "41"
										},
										{
											"begin": 2071,
											"end": 2103,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2071,
											"end": 2103,
											"name": "tag",
											"source": 4,
											"value": "49"
										},
										{
											"begin": 2071,
											"end": 2103,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2064,
											"end": 2069,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2061,
											"end": 2104,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 2051,
											"end": 2053,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "50"
										},
										{
											"begin": 2051,
											"end": 2053,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2118,
											"end": 2119,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2115,
											"end": 2116,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2108,
											"end": 2120,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 2051,
											"end": 2053,
											"name": "tag",
											"source": 4,
											"value": "50"
										},
										{
											"begin": 2051,
											"end": 2053,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2041,
											"end": 2128,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2041,
											"end": 2128,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 2134,
											"end": 2256,
											"name": "tag",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 2134,
											"end": 2256,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2207,
											"end": 2231,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "52"
										},
										{
											"begin": 2225,
											"end": 2230,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2207,
											"end": 2231,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "46"
										},
										{
											"begin": 2207,
											"end": 2231,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2207,
											"end": 2231,
											"name": "tag",
											"source": 4,
											"value": "52"
										},
										{
											"begin": 2207,
											"end": 2231,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2200,
											"end": 2205,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2197,
											"end": 2232,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 2187,
											"end": 2189,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "53"
										},
										{
											"begin": 2187,
											"end": 2189,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2246,
											"end": 2247,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2243,
											"end": 2244,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2236,
											"end": 2248,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 2187,
											"end": 2189,
											"name": "tag",
											"source": 4,
											"value": "53"
										},
										{
											"begin": 2187,
											"end": 2189,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2177,
											"end": 2256,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2177,
											"end": 2256,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"withdrawMoney(address,uint256)": "f274c897"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/assignment/simpleWallet/SimpleWallet.sol\":\"SimpleWallet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/assignment/simpleWallet/Owned.sol\":{\"keccak256\":\"0x9a3437fc5a9acb41c6b6d2e0a30db927c510b3c0159ebc52ac5716c4f4045986\",\"urls\":[\"bzz-raw://f5a6ae9bb0e16297bec0cc2290f09a62531a5e8769e977e74b2d713db85cbfed\",\"dweb:/ipfs/QmX6hcuk8t77TJcqvB8vBV8wh7YwX1v8vdG1H4J9c1zMxC\"]},\"contracts/assignment/simpleWallet/SimpleWallet.sol\":{\"keccak256\":\"0xf1c8437cab94fe1d5795decdd83488cfb83b5d695660a1df755d69a9cd35e2b8\",\"urls\":[\"bzz-raw://942299c7b7300e3a34fa4df2279a980003ae456a530a7940941b44d1a8c1aa62\",\"dweb:/ipfs/QmdWSgwfkyhQpx5tzL8Q1UsqcamF3EHbUMhAE73FdEs6mL\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 3,
								"contract": "contracts/assignment/simpleWallet/SimpleWallet.sol:SimpleWallet",
								"label": "owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 64,
								"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/assignment/simpleWallet/Owned.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "contracts/assignment/simpleWallet/Owned.sol",
					"start": -1
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/assignment/simpleWallet/SimpleWallet.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "contracts/assignment/simpleWallet/SimpleWallet.sol",
					"start": -1
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2462",
				"formattedMessage": "Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.\n --> contracts/assignment/simpleWallet/Owned.sol:6:5:\n  |\n6 |     constructor() public {\n  |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.",
				"severity": "warning",
				"sourceLocation": {
					"end": 122,
					"file": "contracts/assignment/simpleWallet/Owned.sol",
					"start": 66
				},
				"type": "Warning"
			}
		],
		"sources": {
			"contracts/assignment/simpleWallet/Owned.sol": {
				"ast": {
					"absolutePath": "contracts/assignment/simpleWallet/Owned.sol",
					"exportedSymbols": {
						"Owned": [
							25
						]
					},
					"id": 26,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 25,
							"linearizedBaseContracts": [
								25
							],
							"name": "Owned",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 3,
									"mutability": "mutable",
									"name": "owner",
									"nodeType": "VariableDeclaration",
									"scope": 25,
									"src": "46:13:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "46:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 11,
										"nodeType": "Block",
										"src": "87:35:0",
										"statements": [
											{
												"expression": {
													"id": 9,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 6,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3,
														"src": "97:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 7,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "105:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 8,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "105:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "97:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 10,
												"nodeType": "ExpressionStatement",
												"src": "97:18:0"
											}
										]
									},
									"id": 12,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "77:2:0"
									},
									"returnParameters": {
										"id": 5,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "87:0:0"
									},
									"scope": 25,
									"src": "66:56:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 23,
										"nodeType": "Block",
										"src": "441:79:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 18,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 15,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "459:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 16,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "459:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 17,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3,
																"src": "473:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "459:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "596f7520617265206e6f7420616c6c6f776564",
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "480:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_407a93cd9588e1f87530ae7a55d9dae87b125ed01cf287ec5fa47d65e38e4c3c",
																"typeString": "literal_string \"You are not allowed\""
															},
															"value": "You are not allowed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_407a93cd9588e1f87530ae7a55d9dae87b125ed01cf287ec5fa47d65e38e4c3c",
																"typeString": "literal_string \"You are not allowed\""
															}
														],
														"id": 14,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "451:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "451:51:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "451:51:0"
											},
											{
												"id": 22,
												"nodeType": "PlaceholderStatement",
												"src": "512:1:0"
											}
										]
									},
									"id": 24,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "438:2:0"
									},
									"src": "420:100:0",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 26,
							"src": "25:498:0"
						}
					],
					"src": "0:523:0"
				},
				"id": 0
			},
			"contracts/assignment/simpleWallet/SimpleWallet.sol": {
				"ast": {
					"absolutePath": "contracts/assignment/simpleWallet/SimpleWallet.sol",
					"exportedSymbols": {
						"Context": [
							191
						],
						"Ownable": [
							169
						],
						"Owned": [
							25
						],
						"SimpleWallet": [
							56
						]
					},
					"id": 57,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 27,
							"literals": [
								"solidity",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:22:1"
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol",
							"file": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol",
							"id": 28,
							"nodeType": "ImportDirective",
							"scope": 57,
							"sourceUnit": 170,
							"src": "24:105:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/assignment/simpleWallet/Owned.sol",
							"file": "./Owned.sol",
							"id": 29,
							"nodeType": "ImportDirective",
							"scope": 57,
							"sourceUnit": 26,
							"src": "131:21:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 30,
										"name": "Owned",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 25,
										"src": "179:5:1"
									},
									"id": 31,
									"nodeType": "InheritanceSpecifier",
									"src": "179:5:1"
								}
							],
							"contractDependencies": [
								25
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 56,
							"linearizedBaseContracts": [
								56,
								25
							],
							"name": "SimpleWallet",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 46,
										"nodeType": "Block",
										"src": "266:38:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 43,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 35,
															"src": "289:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 40,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 33,
															"src": "276:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 42,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "276:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 44,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "276:21:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 45,
												"nodeType": "ExpressionStatement",
												"src": "276:21:1"
											}
										]
									},
									"functionSelector": "f274c897",
									"id": 47,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 38,
											"modifierName": {
												"id": 37,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 24,
												"src": "256:9:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "256:9:1"
										}
									],
									"name": "withdrawMoney",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "_to",
												"nodeType": "VariableDeclaration",
												"scope": 47,
												"src": "214:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 32,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "214:15:1",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 47,
												"src": "235:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 34,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "235:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "213:35:1"
									},
									"returnParameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "266:0:1"
									},
									"scope": 56,
									"src": "191:113:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 50,
										"nodeType": "Block",
										"src": "337:16:1",
										"statements": []
									},
									"id": 51,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "317:2:1"
									},
									"returnParameters": {
										"id": 49,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "337:0:1"
									},
									"scope": 56,
									"src": "310:43:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 54,
										"nodeType": "Block",
										"src": "380:16:1",
										"statements": []
									},
									"id": 55,
									"implemented": true,
									"kind": "fallback",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "368:2:1"
									},
									"returnParameters": {
										"id": 53,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "380:0:1"
									},
									"scope": 56,
									"src": "359:37:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 57,
							"src": "154:244:1"
						}
					],
					"src": "0:398:1"
				},
				"id": 1
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							191
						],
						"Ownable": [
							169
						]
					},
					"id": 170,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 58,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:2"
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 59,
							"nodeType": "ImportDirective",
							"scope": 170,
							"sourceUnit": 192,
							"src": "127:30:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 61,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 191,
										"src": "683:7:2"
									},
									"id": 62,
									"nodeType": "InheritanceSpecifier",
									"src": "683:7:2"
								}
							],
							"contractDependencies": [
								191
							],
							"contractKind": "contract",
							"documentation": {
								"id": 60,
								"nodeType": "StructuredDocumentation",
								"src": "159:494:2",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 169,
							"linearizedBaseContracts": [
								169,
								191
							],
							"name": "Ownable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 64,
									"mutability": "mutable",
									"name": "_owner",
									"nodeType": "VariableDeclaration",
									"scope": 169,
									"src": "697:22:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 63,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 70,
									"name": "OwnershipTransferred",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 66,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "753:29:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 65,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 68,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "784:24:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 67,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:2"
									},
									"src": "726:84:2"
								},
								{
									"body": {
										"id": 79,
										"nodeType": "Block",
										"src": "926:49:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 75,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 181,
																"src": "955:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 76,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "955:12:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 74,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 168,
														"src": "936:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 77,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "936:32:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 78,
												"nodeType": "ExpressionStatement",
												"src": "936:32:2"
											}
										]
									},
									"documentation": {
										"id": 71,
										"nodeType": "StructuredDocumentation",
										"src": "816:91:2",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 80,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:2"
									},
									"returnParameters": {
										"id": 73,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:2"
									},
									"scope": 169,
									"src": "912:63:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 87,
										"nodeType": "Block",
										"src": "1084:41:2",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 83,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "1094:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:13:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "1094:13:2"
											},
											{
												"id": 86,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:2"
											}
										]
									},
									"documentation": {
										"id": 81,
										"nodeType": "StructuredDocumentation",
										"src": "981:77:2",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 88,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 82,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1081:2:2"
									},
									"src": "1063:62:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 96,
										"nodeType": "Block",
										"src": "1256:30:2",
										"statements": [
											{
												"expression": {
													"id": 94,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 64,
													"src": "1273:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 93,
												"id": 95,
												"nodeType": "Return",
												"src": "1266:13:2"
											}
										]
									},
									"documentation": {
										"id": 89,
										"nodeType": "StructuredDocumentation",
										"src": "1131:65:2",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 97,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 90,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:2:2"
									},
									"returnParameters": {
										"id": 93,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 92,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 97,
												"src": "1247:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 91,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:9:2"
									},
									"scope": 169,
									"src": "1201:85:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "1404:85:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 106,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 102,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 97,
																	"src": "1422:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 103,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1422:7:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 104,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 181,
																	"src": "1433:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 105,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1433:12:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1422:23:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 107,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:34:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 101,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1414:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:68:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "ExpressionStatement",
												"src": "1414:68:2"
											}
										]
									},
									"documentation": {
										"id": 98,
										"nodeType": "StructuredDocumentation",
										"src": "1292:62:2",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 99,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1379:2:2"
									},
									"returnParameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:0:2"
									},
									"scope": 169,
									"src": "1359:130:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 124,
										"nodeType": "Block",
										"src": "1885:47:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 120,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1922:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 119,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1914:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 118,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1914:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 121,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1914:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 117,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 168,
														"src": "1895:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1895:30:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 123,
												"nodeType": "ExpressionStatement",
												"src": "1895:30:2"
											}
										]
									},
									"documentation": {
										"id": 112,
										"nodeType": "StructuredDocumentation",
										"src": "1495:331:2",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 125,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 115,
											"modifierName": {
												"id": 114,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 88,
												"src": "1875:9:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "1875:9:2"
										}
									],
									"name": "renounceOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 113,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1857:2:2"
									},
									"returnParameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1885:0:2"
									},
									"scope": 169,
									"src": "1831:101:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 147,
										"nodeType": "Block",
										"src": "2151:128:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 139,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 134,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 128,
																"src": "2169:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 137,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2189:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 136,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2181:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 135,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2181:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 138,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2181:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2169:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 140,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2193:40:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 133,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2161:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 141,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2161:73:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 142,
												"nodeType": "ExpressionStatement",
												"src": "2161:73:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 144,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 128,
															"src": "2263:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 143,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 168,
														"src": "2244:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 145,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2244:28:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 146,
												"nodeType": "ExpressionStatement",
												"src": "2244:28:2"
											}
										]
									},
									"documentation": {
										"id": 126,
										"nodeType": "StructuredDocumentation",
										"src": "1938:138:2",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 148,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 131,
											"modifierName": {
												"id": 130,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 88,
												"src": "2141:9:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "2141:9:2"
										}
									],
									"name": "transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 129,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 128,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "2108:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 127,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2108:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2107:18:2"
									},
									"returnParameters": {
										"id": 132,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2151:0:2"
									},
									"scope": 169,
									"src": "2081:198:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 167,
										"nodeType": "Block",
										"src": "2496:124:2",
										"statements": [
											{
												"assignments": [
													155
												],
												"declarations": [
													{
														"constant": false,
														"id": 155,
														"mutability": "mutable",
														"name": "oldOwner",
														"nodeType": "VariableDeclaration",
														"scope": 167,
														"src": "2506:16:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 154,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2506:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 157,
												"initialValue": {
													"id": 156,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 64,
													"src": "2525:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:25:2"
											},
											{
												"expression": {
													"id": 160,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 158,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 64,
														"src": "2541:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 159,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 151,
														"src": "2550:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2541:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 161,
												"nodeType": "ExpressionStatement",
												"src": "2541:17:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 163,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 155,
															"src": "2594:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 164,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 151,
															"src": "2604:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 162,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 70,
														"src": "2573:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 165,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2573:40:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 166,
												"nodeType": "EmitStatement",
												"src": "2568:45:2"
											}
										]
									},
									"documentation": {
										"id": 149,
										"nodeType": "StructuredDocumentation",
										"src": "2285:143:2",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 168,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "2461:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 150,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2461:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2460:18:2"
									},
									"returnParameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2496:0:2"
									},
									"scope": 169,
									"src": "2433:187:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 170,
							"src": "654:1968:2"
						}
					],
					"src": "102:2521:2"
				},
				"id": 2
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							191
						]
					},
					"id": 192,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 171,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:3"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 172,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:3",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 191,
							"linearizedBaseContracts": [
								191
							],
							"name": "Context",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 180,
										"nodeType": "Block",
										"src": "702:34:3",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 177,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 178,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 176,
												"id": 179,
												"nodeType": "Return",
												"src": "712:17:3"
											}
										]
									},
									"id": 181,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:3"
									},
									"returnParameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "693:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 174,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:3"
									},
									"scope": 191,
									"src": "640:96:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 189,
										"nodeType": "Block",
										"src": "809:32:3",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 186,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 185,
												"id": 188,
												"nodeType": "Return",
												"src": "819:15:3"
											}
										]
									},
									"id": 190,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 182,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:3"
									},
									"returnParameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "793:14:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 183,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:3"
									},
									"scope": 191,
									"src": "742:99:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 192,
							"src": "608:235:3"
						}
					],
					"src": "86:758:3"
				},
				"id": 3
			}
		}
	}
}